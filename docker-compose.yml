version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: user-management-db
    environment:
      POSTGRES_USER: admin           # ← Сразу создаем нужного пользователя
      POSTGRES_PASSWORD: password123 # ← Сразу нужный пароль
      POSTGRES_DB: userdb
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d userdb" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: user-management-api
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=userdb
      - DB_USER=admin
      - DB_PASSWORD=password123
      - JWT_SECRET=jwt_s3cr3t
      - JWT_REFRESH_SECRET=sup3r_jwt_s3cr3t
      - PORT=4000
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: user-management-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge